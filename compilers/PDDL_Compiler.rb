module PDDL_Compiler
  extend self

  #-----------------------------------------------
  # Predicates to PDDL
  #-----------------------------------------------

  def predicates_to_pddl(output, group = [], group_not = [], indentation = '    ')
    unless group.empty? and group_not.empty?
      group.each {|pre| output << "#{indentation}(#{pre.first} #{pre.drop(1).map {|i| "?#{i}"}.join(' ')})\n"}
      group_not.each {|pre| output << "#{indentation}(not (#{pre.first} #{pre.drop(1).map {|i| "?#{i}"}.join(' ')}))\n"}
    end
  end

  #-----------------------------------------------
  # Compile domain
  #-----------------------------------------------

  def compile_domain(domain_name, problem_name, operators, methods, predicates, state, tasks, goal_pos, goal_not)
    # TODO add initial state and goal state predicates
    predicates = {}
    negative_preconditions = ''
    operators.each {|op|
      negative_preconditions = ' :negative-preconditions' if operators.all? {|op| op[3].empty?}
      2.upto(5) {|i| op[i].each {|p| predicates[p.first] = p unless predicates.include?(p.first)}}
    }
    domain_str = "; Generated by Hype\n(define (domain #{domain_name})\n"
    domain_str << "  (:requirements :strips#{negative_preconditions})\n\n  (:predicates\n"
    predicates_to_pddl(domain_str, predicates.values)
    domain_str << "  )\n"
    # Operators
    operators.each {|op|
      # Header
      domain_str << "\n  (:action #{op.first}\n    :parameters (#{op[1].map {|i| "?#{i}"}.join(' ')})\n"
      # Preconditions
      domain_str << "    :precondition\n      (and\n"
      predicates_to_pddl(domain_str, op[2], op[3], '        ')
      domain_str << "      )\n"
      # Effects
      domain_str << "    :effect\n      (and\n"
      predicates_to_pddl(domain_str, op[4], op[5], '        ')
      domain_str << "      )\n  )\n"
    }
    domain_str << ')'
  end

  #-----------------------------------------------
  # Compile problem
  #-----------------------------------------------

  def compile_problem(domain_name, problem_name, operators, methods, predicates, state, tasks, goal_pos, goal_not, domain_filename)
    objects = []
    start_str = ''
    state.each {|pre|
      objects.push(*pre.drop(1))
      start_str << "    (#{pre.first} #{pre.drop(1).join(' ')})\n"
    }
    goal_str = ''
    goal_pos.each {|pre|
      objects.push(*pre.drop(1))
      goal_str << "      (#{pre.first} #{pre.drop(1).join(' ')})\n"
    }
    goal_not.each {|pre|
      objects.push(*pre.drop(1))
      goal_str << "      (not (#{pre.first} #{pre.drop(1).join(' ')}))\n"
    }
    objects.uniq!
    negative_preconditions = operators.all? {|op| op[3].empty?} ? ''  : ' :negative-preconditions'
"; Generated by Hype
(define (problem #{problem_name})
  (:domain #{domain_name})
  (:requirements :strips#{negative_preconditions})
  (:objects\n    #{objects.join(' ')}\n  )
  (:init\n#{start_str}  )
  (:goal\n    (and\n#{goal_str}    )\n  )\n)"
  end
end