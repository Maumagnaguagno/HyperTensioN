module PDDL_Compiler
  extend self

  #-----------------------------------------------
  # Compile domain
  #-----------------------------------------------

  def compile_domain(domain_name, problem_name, operators, methods, predicates, state, tasks, goal_pos, goal_not)
    # Predicate declaration
    declared = {}
    negative_preconditions = false
    operators.each {|op|
      negative_preconditions = true unless op[3].empty?
      2.upto(5) {|i| op[i].each {|p| (declared[p.first] ||= p.join(' ?')).squeeze!('?')}}
    }
    state.each {|p| declared[p.first] ||= p.join(' ?') if predicates.include?(p.first)}
    goal_pos.each {|p| declared[p.first] ||= p.join(' ?')}
    goal_not.each {|p| declared[p.first] ||= p.join(' ?')}
    domain_str = "; Generated by Hype\n(define (domain #{domain_name})
  (:requirements :strips#{' :negative-preconditions' if negative_preconditions})\n\n  (:predicates\n"
    declared.each_value {|pre| domain_str << "    (#{pre})\n"}
    domain_str << "  )\n"
    # Operators
    operators.each {|op|
      # Header
      domain_str << "\n  (:action #{op.first}\n    :parameters (#{op[1].join(' ')})\n    :precondition (and\n"
      # Preconditions
      op[2].each {|pre| domain_str << "      (#{pre.join(' ')})\n"}
      op[3].each {|pre| domain_str << "      (not (#{pre.join(' ')}))\n"}
      # Effects
      domain_str << "    )\n    :effect (and\n"
      op[4].each {|pre| domain_str << "      (#{pre.join(' ')})\n"}
      op[5].each {|pre| domain_str << "      (not (#{pre.join(' ')}))\n"}
      domain_str << "    )\n  )\n"
    }
    domain_str << ')'
  end

  #-----------------------------------------------
  # Compile problem
  #-----------------------------------------------

  def compile_problem(domain_name, problem_name, operators, methods, predicates, state, tasks, goal_pos, goal_not, domain_filename)
    objects = []
    start_str = ''
    state.each {|pre|
      objects.concat(pre.drop(1))
      start_str << "    (#{pre.join(' ')})\n"
    }
    tasks.drop(1).each {|pre,*terms| objects.concat(terms)}
    goal_str = ''
    goal_pos.each {|pre|
      objects.concat(pre.drop(1))
      goal_str << "    (#{pre.join(' ')})\n"
    }
    goal_not.each {|pre|
      objects.concat(pre.drop(1))
      goal_str << "    (not (#{pre.join(' ')}))\n"
    }
    objects.uniq!
"; Generated by Hype
(define (problem #{problem_name})
  (:domain #{domain_name})
  (:objects\n    #{objects.join(' ')}\n  )
  (:init\n#{start_str}  )
  (:goal (and\n#{goal_str}  ))\n)"
  end
end