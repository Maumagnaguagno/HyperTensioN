# Generated by Hype
require '../../Hypertension'

module Robby
  include Hypertension
  extend self

  #-----------------------------------------------
  # Domain
  #-----------------------------------------------

  @domain = {
    # Operators
    'enter' => true,
    'exit' => true,
    'move' => true,
    'report' => true,
    'visit_at' => true,
    'unvisit_at' => true,
    # Methods
    'swap_at' => [
      'swap_at_base',
      'swap_at_using_enter',
      'swap_at_using_exit',
      'swap_at_using_move'
    ],
    'dependency_swap_at_report' => [
      'dependency_satisfied',
      'dependency_unsatisfied'
    ]
  }

  #-----------------------------------------------
  # Operators
  #-----------------------------------------------

  def enter(bot, source, destination)
    apply_operator(
      # True preconditions
      [
        ['robot', bot],
        ['hallway', source],
        ['room', destination],
        ['at', bot, source],
        ['connected', source, destination]
      ],
      # False preconditions
      [
        ['at', bot, destination]
      ],
      # Add effects
      [
        ['at', bot, destination]
      ],
      # Del effects
      [
        ['at', bot, source]
      ]
    )
  end

  def exit(bot, source, destination)
    apply_operator(
      # True preconditions
      [
        ['robot', bot],
        ['room', source],
        ['hallway', destination],
        ['at', bot, source],
        ['connected', source, destination]
      ],
      # False preconditions
      [
        ['at', bot, destination]
      ],
      # Add effects
      [
        ['at', bot, destination]
      ],
      # Del effects
      [
        ['at', bot, source]
      ]
    )
  end

  def move(bot, source, destination)
    apply_operator(
      # True preconditions
      [
        ['robot', bot],
        ['hallway', source],
        ['hallway', destination],
        ['at', bot, source],
        ['connected', source, destination]
      ],
      # False preconditions
      [
        ['at', bot, destination]
      ],
      # Add effects
      [
        ['at', bot, destination]
      ],
      # Del effects
      [
        ['at', bot, source]
      ]
    )
  end

  def report(bot, source, thing)
    apply_operator(
      # True preconditions
      [
        ['robot', bot],
        ['location', source],
        ['beacon', thing],
        ['at', bot, source],
        ['in', thing, source]
      ],
      # False preconditions
      [
        ['reported', bot, thing]
      ],
      # Add effects
      [
        ['reported', bot, thing]
      ],
      # Del effects
      []
    )
  end

  def visit_at(object, goal)
    apply_operator(
      # True preconditions
      [],
      # False preconditions
      [],
      # Add effects
      [
        ['visited_at', object, goal]
      ],
      # Del effects
      []
    )
  end

  def unvisit_at(object, goal)
    apply_operator(
      # True preconditions
      [],
      # False preconditions
      [],
      # Add effects
      [],
      # Del effects
      [
        ['visited_at', object, goal]
      ]
    )
  end

  #-----------------------------------------------
  # Methods
  #-----------------------------------------------

  def swap_at_base(object, goal)
    if applicable?(
      # True preconditions
      [
        ['at', object, goal]
      ],
      # False preconditions
      []
    )
      yield []
    end
  end

  def swap_at_using_enter(object, goal)
    current = ''
    intermediary = ''
    generate(
      # True preconditions
      [
        ['at', object, current],
        ['connected', current, intermediary]
      ],
      # False preconditions
      [
        ['at', object, goal],
        ['visited_at', object, intermediary]
      ], current, intermediary
    ) {
      yield [
        ['enter', object, current, intermediary],
        ['visit_at', object, current],
        ['swap_at', object, goal],
        ['unvisit_at', object, current]
      ]
    }
  end

  def swap_at_using_exit(object, goal)
    current = ''
    intermediary = ''
    generate(
      # True preconditions
      [
        ['at', object, current],
        ['connected', current, intermediary]
      ],
      # False preconditions
      [
        ['at', object, goal],
        ['visited_at', object, intermediary]
      ], current, intermediary
    ) {
      yield [
        ['exit', object, current, intermediary],
        ['visit_at', object, current],
        ['swap_at', object, goal],
        ['unvisit_at', object, current]
      ]
    }
  end

  def swap_at_using_move(object, goal)
    current = ''
    intermediary = ''
    generate(
      # True preconditions
      [
        ['at', object, current],
        ['connected', current, intermediary]
      ],
      # False preconditions
      [
        ['at', object, goal],
        ['visited_at', object, intermediary]
      ], current, intermediary
    ) {
      yield [
        ['move', object, current, intermediary],
        ['visit_at', object, current],
        ['swap_at', object, goal],
        ['unvisit_at', object, current]
      ]
    }
  end

  def dependency_satisfied(object, goal, thing)
    if applicable?(
      # True preconditions
      [
        ['at', object, goal]
      ],
      # False preconditions
      []
    )
      yield [
        ['report', object, goal, thing]
      ]
    end
  end

  def dependency_unsatisfied(object, goal, thing)
    if applicable?(
      # True preconditions
      [],
      # False preconditions
      [
        ['at', object, goal]
      ]
    )
      yield [
        ['swap_at', object, goal],
        ['report', object, goal, thing]
      ]
    end
  end
end