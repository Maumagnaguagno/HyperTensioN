require './tests/hypest'

class Brute < Test::Unit::TestCase
  include Hypest

  def test_basic_pb1_pddl_parsing_with_dummy_compile_to_jshop
    compiler_tests(
      # Files
      'examples/basic/basic.pddl',
      'examples/basic/pb1.pddl',
      # Parser, extensions and output
      PDDL_Parser, ['dummy'], 'jshop',
      # Domain
'; Generated by Hype
(defdomain basic (

  ;------------------------------
  ; Operators
  ;------------------------------

  (:operator (!pickup ?a)
    (
      (not (have ?a))
    )
    nil
    (
      (have ?a)
    )
  )

  (:operator (!drop ?a)
    (
      (have ?a)
    )
    (
      (have ?a)
    )
    nil
  )

  (:operator (!!visit_pickup_1 ?a)
    (
      (not (visited_pickup_1 ?a))
    )
    nil
    (
      (visited_pickup_1 ?a)
    )
  )

  (:operator (!!unvisit_pickup_1 ?a)
    nil
    (
      (visited_pickup_1 ?a)
    )
    nil
  )

  (:operator (!!visit_drop_1 ?a)
    (
      (not (visited_drop_1 ?a))
    )
    nil
    (
      (visited_drop_1 ?a)
    )
  )

  (:operator (!!unvisit_drop_1 ?a)
    nil
    (
      (visited_drop_1 ?a)
    )
    nil
  )

  ;------------------------------
  ; Methods
  ;------------------------------

  (:method (perform_goal_have_banjo )
    finish_perform_goal_have_banjo
    (
      (have banjo)
    )
    nil
  )

  (:method (perform_goal_have_banjo )
    try_pickup_to_perform_goal_have_banjo1
    (
      (not (have ?a))
    )
    (
      (!!visit_pickup_1 ?a)
      (!pickup ?a)
      (perform_goal_have_banjo)
      (!!unvisit_pickup_1 ?a)
    )
  )

  (:method (perform_goal_have_banjo )
    try_drop_to_perform_goal_have_banjo1
    (
      (have ?a)
    )
    (
      (!!visit_drop_1 ?a)
      (!drop ?a)
      (perform_goal_have_banjo)
      (!!unvisit_drop_1 ?a)
    )
  )
))',
      # Problem
'; Generated by Hype
(defproblem pb1 basic

  ;------------------------------
  ; Start
  ;------------------------------

  nil

  ;------------------------------
  ; Tasks
  ;------------------------------

  (:unordered
    (perform_goal_have_banjo)
  )
)'
    )
  end
end