require './tests/hypest'

class Dependent < Test::Unit::TestCase
  include Hypest

  def test_dependency_pb1_pddl_parsing
    parser_tests(
      # Files
      'examples/dependency/dependency.pddl',
      'examples/dependency/pb1.pddl',
      # Parser and extensions
      PDDL_Parser, [],
      # Attributes
      :domain_name => 'dependency',
      :problem_name => 'pb1',
      :operators => [
        ['work', ['?a'],
          # Preconditions
          [['agent', '?a']],
          [['got_money', '?a']],
          # Effects
          [['got_money', '?a']],
          [['happy', '?a']]
        ],
        ['buy', ['?a', '?x'],
          # Preconditions
          [['agent', '?a'], ['object', '?x'], ['got_money', '?a']],
          [['have', '?a', '?x']],
          # Effects
          [['have', '?a', '?x']],
          [['got_money', '?a']]
        ],
        ['give', ['?a', '?b', '?x'],
          # Preconditions
          [['agent', '?a'], ['agent', '?b'], ['object', '?x'], ['have', '?a', '?x']],
          [['have', '?b', '?x']],
          # Effects
          [['have', '?b', '?x'], ['happy', '?b']],
          [['have', '?a', '?x']]
        ]
      ],
      :methods => [],
      :predicates => {
        'agent' => false,
        'object' => false,
        'have' => true,
        'got_money' => true,
        'happy' => true
      },
      :state => [
        ['agent', 'ana'],
        ['agent', 'bob'],
        ['object', 'gift'],
        ['have', 'ana', 'gift']
      ],
      :tasks => [],
      :goal_pos => [['happy', 'bob']],
      :goal_not => [],
      :objects => ['ana', 'bob', 'gift'],
      :requirements => [':strips', ':typing', ':negative-preconditions']
    )
  end

  def test_dependency_pb1_pddl_parsing_with_patterns_compile_to_jshop
    compiler_tests(
      # Files
      'examples/dependency/dependency.pddl',
      'examples/dependency/pb1.pddl',
      # Parser, extensions and output
      PDDL_Parser, ['patterns'], 'jshop',
      # Domain
      DEPENDENCY_DOMAIN_JSHOP + UNIFY_BUY_GIVE,
      # Problem
      DEPENDENCY_PROBLEM_JSHOP.sub('<pb>','1').sub!('<start>', "\n    (have ana gift)").sub!('<tasks>', '(unify_dependency_buy_before_give_for_happy bob)')
    )
  end

  def test_dependency_pb2_pddl_parsing_with_patterns_compile_to_jshop
    compiler_tests(
      # Files
      'examples/dependency/dependency.pddl',
      'examples/dependency/pb2.pddl',
      # Parser, extensions and output
      PDDL_Parser, ['patterns'], 'jshop',
      # Domain
      DEPENDENCY_DOMAIN_JSHOP + UNIFY_BUY_GIVE,
      # Problem
      DEPENDENCY_PROBLEM_JSHOP.sub('<pb>','2').sub!('<start>', '').sub!('<tasks>', '(unify_dependency_buy_before_give_for_happy bob)')
    )
  end

  def test_dependency_pb3_pddl_parsing_with_patterns_compile_to_jshop
    compiler_tests(
      # Files
      'examples/dependency/dependency.pddl',
      'examples/dependency/pb3.pddl',
      # Parser, extensions and output
      PDDL_Parser, ['patterns'], 'jshop',
      # Domain
      DEPENDENCY_DOMAIN_JSHOP + '))',
      # Problem
      DEPENDENCY_PROBLEM_JSHOP.sub('<pb>','3').sub!('<start>', '').sub!('<tasks>', '(!work bob)')
    )
  end

  def test_dependency_pb4_pddl_parsing_with_patterns_compile_to_jshop
    compiler_tests(
      # Files
      'examples/dependency/dependency.pddl',
      'examples/dependency/pb4.pddl',
      # Parser, extensions and output
      PDDL_Parser, ['patterns'], 'jshop',
      # Domain
      DEPENDENCY_DOMAIN_JSHOP + '))',
      # Problem
      DEPENDENCY_PROBLEM_JSHOP.sub('<pb>','4').sub!('<start>', '').sub!('<tasks>', '(dependency_work_before_buy_for_have bob gift)')
    )
  end

  def test_dependency_pb5_pddl_parsing_with_patterns_compile_to_jshop
    compiler_tests(
      # Files
      'examples/dependency/dependency.pddl',
      'examples/dependency/pb5.pddl',
      # Parser, extensions and output
      PDDL_Parser, ['patterns'], 'jshop',
      # Domain
      DEPENDENCY_DOMAIN_JSHOP + UNIFY_BUY_GIVE,
      # Problem
      DEPENDENCY_PROBLEM_JSHOP.sub('<pb>','5').sub!('<start>', "\n    (happy bob)").sub!('<tasks>', '(unify_dependency_buy_before_give_for_happy bob)')
    )
  end

  DEPENDENCY_DOMAIN_JSHOP = '; Generated by Hype
(defdomain dependency (

  ;------------------------------
  ; Operators
  ;------------------------------

  (:operator (!work ?a)
    (
      (agent ?a)
      (not (got_money ?a))
    )
    (
      (happy ?a)
    )
    (
      (got_money ?a)
    )
  )

  (:operator (!buy ?a ?x)
    (
      (agent ?a)
      (object ?x)
      (got_money ?a)
      (not (have ?a ?x))
    )
    (
      (got_money ?a)
    )
    (
      (have ?a ?x)
    )
  )

  (:operator (!give ?a ?b ?x)
    (
      (agent ?a)
      (agent ?b)
      (object ?x)
      (have ?a ?x)
      (not (have ?b ?x))
    )
    (
      (have ?a ?x)
    )
    (
      (have ?b ?x)
      (happy ?b)
    )
  )

  ;------------------------------
  ; Methods
  ;------------------------------

  (:method (dependency_work_before_buy_for_have ?a ?x)
    goal-satisfied
    (
      (have ?a ?x)
    )
    nil
  )

  (:method (dependency_work_before_buy_for_have ?a ?x)
    satisfied
    (
      (agent ?a)
      (object ?x)
      (got_money ?a)
    )
    (
      (!buy ?a ?x)
    )
  )

  (:method (dependency_work_before_buy_for_have ?a ?x)
    unsatisfied
    (
      (agent ?a)
      (object ?x)
      (not (got_money ?a))
    )
    (
      (!work ?a)
      (!buy ?a ?x)
    )
  )

  (:method (dependency_buy_before_give_for_have ?a ?x ?b)
    goal-satisfied
    (
      (have ?b ?x)
    )
    nil
  )

  (:method (dependency_buy_before_give_for_have ?a ?x ?b)
    satisfied
    (
      (agent ?a)
      (object ?x)
      (agent ?b)
      (have ?a ?x)
    )
    (
      (!give ?a ?b ?x)
    )
  )

  (:method (dependency_buy_before_give_for_have ?a ?x ?b)
    unsatisfied
    (
      (agent ?a)
      (object ?x)
      (agent ?b)
      (not (have ?a ?x))
    )
    (
      (dependency_work_before_buy_for_have ?a ?x)
      (!give ?a ?b ?x)
    )
  )

  (:method (dependency_buy_before_give_for_happy ?a ?x ?b)
    goal-satisfied
    (
      (happy ?b)
    )
    nil
  )

  (:method (dependency_buy_before_give_for_happy ?a ?x ?b)
    satisfied
    (
      (agent ?a)
      (object ?x)
      (agent ?b)
      (have ?a ?x)
    )
    (
      (!give ?a ?b ?x)
    )
  )

  (:method (dependency_buy_before_give_for_happy ?a ?x ?b)
    unsatisfied
    (
      (agent ?a)
      (object ?x)
      (agent ?b)
      (not (have ?a ?x))
    )
    (
      (dependency_work_before_buy_for_have ?a ?x)
      (!give ?a ?b ?x)
    )
  )
'

UNIFY_BUY_GIVE = '
  (:method (unify_dependency_buy_before_give_for_happy ?b)
    a_x
    (
      (agent ?a)
      (object ?x)
      (agent ?b)
    )
    (
      (dependency_buy_before_give_for_happy ?a ?x ?b)
    )
  )
))'

DEPENDENCY_PROBLEM_JSHOP = '; Generated by Hype
(defproblem pb<pb> dependency

  ;------------------------------
  ; Start
  ;------------------------------

  (
    (agent ana)
    (agent bob)
    (object gift)<start>
  )

  ;------------------------------
  ; Tasks
  ;------------------------------

  (:unordered
    <tasks>
  )
)'
end