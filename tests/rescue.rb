require './tests/hypest'

class Rescue < Test::Unit::TestCase
  include Hypest

  def test_robby_pb1_pddl_parsing
    parser_tests(
      # Files
      'examples/robby/robby.pddl',
      'examples/robby/pb1.pddl',
      # Parser and extensions
      PDDL_Parser, [],
      # Attributes
      :domain_name => 'robby',
      :problem_name => 'pb1',
      :operators => [
        ['enter', ['?bot', '?source', '?destination'],
          # Preconditions
          [
            ['robot', '?bot'],
            ['hallway', '?source'],
            ['room', '?destination'],
            ['at', '?bot', '?source'],
            ['connected', '?source', '?destination']
          ],
          [['at', '?bot', '?destination']],
          # Effects
          [['at', '?bot', '?destination']],
          [['at', '?bot', '?source']]
        ],
        ['exit', ['?bot', '?source', '?destination'],
          # Preconditions
          [
            ['robot', '?bot'],
            ['room', '?source'],
            ['hallway', '?destination'],
            ['at', '?bot', '?source'],
            ['connected', '?source', '?destination']
          ],
          [['at', '?bot', '?destination']],
          # Effects
          [['at', '?bot', '?destination']],
          [['at', '?bot', '?source']]
        ],
        ['move', ['?bot', '?source', '?destination'],
          # Preconditions
          [
            ['robot', '?bot'],
            ['hallway', '?source'],
            ['hallway', '?destination'],
            ['at', '?bot', '?source'],
            ['connected', '?source', '?destination']
          ],
          [['at', '?bot', '?destination']],
          # Effects
          [['at', '?bot', '?destination']],
          [['at', '?bot', '?source']]
        ],
        ['report', ['?bot', '?source', '?beacon'],
          # Preconditions
          [
            ['robot', '?bot'],
            ['location', '?source'],
            ['beacon', '?beacon'],
            ['at', '?bot', '?source'],
            ['in', '?beacon', '?source']
          ],
          [['reported', '?bot', '?beacon']],
          # Effects
          [['reported', '?bot', '?beacon']],
          []
        ]
      ],
      :methods => [],
      :predicates => {
        'robot' => false,
        'beacon' => false,
        'room' => false,
        'hallway' => false,
        'location' => false,
        'at' => true,
        'in' => false,
        'connected' => false,
        'reported' => true
      },
      :state => [
        ['robot', 'robby'],
        ['object', 'robby'],
        ['hallway', 'left'],
        ['location', 'left'],
        ['object', 'left'],
        ['hallway', 'middle'],
        ['location', 'middle'],
        ['object', 'middle'],
        ['hallway', 'right'],
        ['location', 'right'],
        ['object', 'right'],
        ['room', 'room1'],
        ['location', 'room1'],
        ['object', 'room1'],
        ['beacon', 'beacon1'],
        ['object', 'beacon1'],
        ['at', 'robby', 'left'],
        ['in', 'beacon1', 'room1'],
        ['connected', 'middle', 'room1'],
        ['connected', 'room1', 'middle'],
        ['connected', 'left', 'middle'],
        ['connected', 'middle', 'left'],
        ['connected', 'middle', 'right'],
        ['connected', 'right', 'middle']
      ],
      :tasks => [],
      :goal_pos => [['reported', 'robby', 'beacon1'], ['at', 'robby', 'right']],
      :goal_not => [],
      :objects => ['robby', 'left', 'middle', 'right', 'room1', 'beacon1'],
      :requirements => [':strips', ':typing', ':negative-preconditions']
    )
  end

  def test_robby_pb1_pddl_parsing_with_patterns_compile_to_jshop
    compiler_tests(
      # Files
      'examples/robby/robby.pddl',
      'examples/robby/pb1.pddl',
      # Parser, extensions and output
      PDDL_Parser, ['patterns'], 'jshop',
      # Domain
'; Generated by Hype
(defdomain robby (

  ;------------------------------
  ; Operators
  ;------------------------------

  (:operator (!enter ?bot ?source ?destination)
    (
      (robot ?bot)
      (hallway ?source)
      (room ?destination)
      (at ?bot ?source)
      (connected ?source ?destination)
      (not (at ?bot ?destination))
    )
    (
      (at ?bot ?source)
    )
    (
      (at ?bot ?destination)
    )
  )

  (:operator (!exit ?bot ?source ?destination)
    (
      (robot ?bot)
      (room ?source)
      (hallway ?destination)
      (at ?bot ?source)
      (connected ?source ?destination)
      (not (at ?bot ?destination))
    )
    (
      (at ?bot ?source)
    )
    (
      (at ?bot ?destination)
    )
  )

  (:operator (!move ?bot ?source ?destination)
    (
      (robot ?bot)
      (hallway ?source)
      (hallway ?destination)
      (at ?bot ?source)
      (connected ?source ?destination)
      (not (at ?bot ?destination))
    )
    (
      (at ?bot ?source)
    )
    (
      (at ?bot ?destination)
    )
  )

  (:operator (!report ?bot ?source ?beacon)
    (
      (robot ?bot)
      (location ?source)
      (beacon ?beacon)
      (at ?bot ?source)
      (in ?beacon ?source)
      (not (reported ?bot ?beacon))
    )
    nil
    (
      (reported ?bot ?beacon)
    )
  )

  (:operator (!!visit_at ?bot ?source)
    nil
    nil
    (
      (visited_at ?bot ?source)
    )
  )

  (:operator (!!unvisit_at ?bot ?source)
    nil
    (
      (visited_at ?bot ?source)
    )
    nil
  )

  ;------------------------------
  ; Methods
  ;------------------------------

  (:method (swap_at_until_at ?bot ?source)
    base
    (
      (at ?bot ?source)
    )
    nil
  )

  (:method (swap_at_until_at ?bot ?source)
    using_enter
    (
      (at ?bot ?current)
      (connected ?current ?intermediate)
      (not (at ?bot ?source))
      (not (visited_at ?bot ?intermediate))
    )
    (
      (!enter ?bot ?current ?intermediate)
      (!!visit_at ?bot ?current)
      (swap_at_until_at ?bot ?source)
      (!!unvisit_at ?bot ?current)
    )
  )

  (:method (swap_at_until_at ?bot ?source)
    using_exit
    (
      (at ?bot ?current)
      (connected ?current ?intermediate)
      (not (at ?bot ?source))
      (not (visited_at ?bot ?intermediate))
    )
    (
      (!exit ?bot ?current ?intermediate)
      (!!visit_at ?bot ?current)
      (swap_at_until_at ?bot ?source)
      (!!unvisit_at ?bot ?current)
    )
  )

  (:method (swap_at_until_at ?bot ?source)
    using_move
    (
      (at ?bot ?current)
      (connected ?current ?intermediate)
      (not (at ?bot ?source))
      (not (visited_at ?bot ?intermediate))
    )
    (
      (!move ?bot ?current ?intermediate)
      (!!visit_at ?bot ?current)
      (swap_at_until_at ?bot ?source)
      (!!unvisit_at ?bot ?current)
    )
  )

  (:method (dependency_swap_at_until_at_before_report_for_reported ?bot ?source ?beacon)
    goal-satisfied
    (
      (reported ?bot ?beacon)
    )
    nil
  )

  (:method (dependency_swap_at_until_at_before_report_for_reported ?bot ?source ?beacon)
    unsatisfied
    (
      (robot ?bot)
      (location ?source)
      (beacon ?beacon)
      (in ?beacon ?source)
      (not (at ?bot ?source))
    )
    (
      (swap_at_until_at ?bot ?source)
      (!report ?bot ?source ?beacon)
    )
  )

  (:method (unify_dependency_swap_at_until_at_before_report_for_reported ?bot ?beacon)
    source
    (
      (robot ?bot)
      (location ?source)
      (beacon ?beacon)
      (in ?beacon ?source)
    )
    (
      (dependency_swap_at_until_at_before_report_for_reported ?bot ?source ?beacon)
    )
  )
))',
      # Problem
'; Generated by Hype
(defproblem pb1 robby

  ;------------------------------
  ; Start
  ;------------------------------

  (
    (robot robby)
    (object robby)
    (hallway left)
    (location left)
    (object left)
    (hallway middle)
    (location middle)
    (object middle)
    (hallway right)
    (location right)
    (object right)
    (room room1)
    (location room1)
    (object room1)
    (beacon beacon1)
    (object beacon1)
    (at robby left)
    (in beacon1 room1)
    (connected middle room1)
    (connected room1 middle)
    (connected left middle)
    (connected middle left)
    (connected middle right)
    (connected right middle)
  )

  ;------------------------------
  ; Tasks
  ;------------------------------

  (:unordered
    (swap_at_until_at robby right)
    (unify_dependency_swap_at_until_at_before_report_for_reported robby beacon1)
  )
)'
    )
  end
end